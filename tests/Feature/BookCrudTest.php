<?php

namespace Tests\Feature;

use App\Models\Author;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class BookCrudTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @var \Illuminate\Database\Eloquent\Collection|\Illuminate\Database\Eloquent\Model
     */
    private $user;

    public function testStatus201WithMessageCreatedWhenCreateABookWhenAuthenticated()
    {
        $response = $this->actingAs($this->user)->post('/books', $this->data());
        $response->assertCreated();
        $response->assertJson(["message" => "Created"]);
    }

    public function testRedirectToLoginIfNotAuthenticatedWith302Status()
    {
        $response = $this->post('/books', $this->data());
        $response->assertStatus(302);
        $response->assertRedirect('/login');
    }

    public function testCountOfDatabaseInBooksTableIs1()
    {
        $this->actingAs($this->user)->post('/books', $this->data());
        $this->assertDatabaseCount("books", 1);
    }

    public function testValidatedCookieExistsAfterVisitingBooksRoute()
    {
        $response = $this->actingAs($this->user)->post('/books', $this->data());
        $response->assertCookie('validated', 'yes');
    }

    public function testLibrarianCanSeeBookCreationForm()
    {
        $user = $this->user;
        $user->role = 'librarian';
        $response = $this->actingAs($user)->get('/books/create');
        $response->assertOk();
        $response->assertViewIs('book_creation');
    }

    public function testNonLibrarianCannotSeeBookCreationForm()
    {
        $user = $this->user;
        $user->role = 'non-librarian';
        $response = $this->actingAs($user)->get('/books/create');
        $response->assertForbidden();
    }

    private function data($data = []): array
    {   $author = Author::factory()->create();
        $default =  [
            "title" => "New Book",
            "description" => "New Book description",
            "author_id" => $author->id,
            "ISBN" => "12b-422-24ff",
        ];
        return array_merge($default, $data);
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create();
    }


}
